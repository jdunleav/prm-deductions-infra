#!/bin/bash

set -Eeo pipefail

AWS_REGION=eu-west-2
NHS_SERVICE=deductions-infra

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function tf_plan {
  check_env
  operation=$1

  terraform init -backend-config key=${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate
  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
    terraform plan -var-file=${NHS_ENVIRONMENT}.tfvars -out="nhs_deployment.tfplan"
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -var-file=${NHS_ENVIRONMENT}.tfvars -out="nhs_deployment.tfplan" -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi
}

function tf_apply {
  check_env
  terraform init -backend-config key=${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate
  terraform get # modules
  terraform apply nhs_deployment.tfplan
  terraform output -json > tf-out.json
}

function create_secret {
  secret_id="$1"
  set +e
  value=$(aws ssm get-parameter --region $AWS_REGION --name $secret_id | jq -r ".Parameter.Value")
  if [[ $? == 0 ]]; then
    echo "Secret at $secret_id already exists"
  else
    set -e
    echo "Secret does not exists. Creating $secret_id"
    value=$(openssl rand -base64 24)
    aws ssm put-parameter \
     --region $AWS_REGION \
     --name $secret_id \
     --type SecureString \
     --overwrite \
     --value "$value"
  fi
}

function create_value {
  value_id="$1"
  value="$2"
  set +e
  value=$(aws ssm get-parameter --region $AWS_REGION --name $value_id | jq -r ".Parameter.Value")
  if [[ $? == 0 ]]; then
    echo "Value at $value_id already exists"
  else
    set -e
    echo "Value does not exists. Creating $value_id"
    aws ssm put-parameter \
     --region $AWS_REGION \
     --name $value_id \
     --type String \
     --overwrite \
     --value "$value"
  fi
}

command="$1"
case "${command}" in
  tf)
      dojo "bash"
      ;;
  _tf_plan)
      tf_plan "$2"
      ;;
  tf_plan)
      check_env
      dojo "./tasks _tf_plan $2"
      ;;
  _tf_apply)
      tf_apply
      ;;
  tf_apply)
      check_env
      dojo "./tasks _tf_apply"
      ;;
  _create_secrets)
      create_secret "/nhs/${NHS_ENVIRONMENT}/db/db-username"
      create_secret "/nhs/${NHS_ENVIRONMENT}/db/db-password"
      create_secret "/nhs/${NHS_ENVIRONMENT}/mq/admin-username"
      create_secret "/nhs/${NHS_ENVIRONMENT}/mq/admin-password"
      create_secret "/nhs/${NHS_ENVIRONMENT}/mq/app-username"
      create_secret "/nhs/${NHS_ENVIRONMENT}/mq/app-password"
      account_id=$(aws sts get-caller-identity | jq -r .Account)
      create_value "/NHS/${NHS_ENVIRONMENT}-${account_id}/tf/deductions_private_bastion" "false"
      ;;
  create_secrets)
      # Needs to run only once, when adding new environment
      check_env
      dojo "./tasks _create_secrets"
      ;;
  sanity_check)
      dojo "./tasks _sanity_check"
      ;;
  _sanity_check)
      check_env
      nslookup ${NHS_ENVIRONMENT}.alb.patient-deductions.nhs.uk
      curl -i --fail "http://${NHS_ENVIRONMENT}.alb.patient-deductions.nhs.uk"
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
